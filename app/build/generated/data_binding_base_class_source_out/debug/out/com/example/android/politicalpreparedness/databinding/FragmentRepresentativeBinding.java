// Generated by data binding compiler. Do not edit!
package com.example.android.politicalpreparedness.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.example.android.politicalpreparedness.R;
import com.example.android.politicalpreparedness.representative.RepresentativeViewModel;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class FragmentRepresentativeBinding extends ViewDataBinding {
  @NonNull
  public final EditText addressLine1;

  @NonNull
  public final EditText addressLine2;

  @NonNull
  public final Button buttonLocation;

  @NonNull
  public final Button buttonSearch;

  @NonNull
  public final EditText city;

  @NonNull
  public final TextView listPlaceholder;

  @NonNull
  public final TextView representativeTitle;

  @NonNull
  public final TextView searchTitle;

  @NonNull
  public final Spinner state;

  @NonNull
  public final EditText zip;

  @Bindable
  protected RepresentativeViewModel mViewModel;

  protected FragmentRepresentativeBinding(Object _bindingComponent, View _root,
      int _localFieldCount, EditText addressLine1, EditText addressLine2, Button buttonLocation,
      Button buttonSearch, EditText city, TextView listPlaceholder, TextView representativeTitle,
      TextView searchTitle, Spinner state, EditText zip) {
    super(_bindingComponent, _root, _localFieldCount);
    this.addressLine1 = addressLine1;
    this.addressLine2 = addressLine2;
    this.buttonLocation = buttonLocation;
    this.buttonSearch = buttonSearch;
    this.city = city;
    this.listPlaceholder = listPlaceholder;
    this.representativeTitle = representativeTitle;
    this.searchTitle = searchTitle;
    this.state = state;
    this.zip = zip;
  }

  public abstract void setViewModel(@Nullable RepresentativeViewModel viewModel);

  @Nullable
  public RepresentativeViewModel getViewModel() {
    return mViewModel;
  }

  @NonNull
  public static FragmentRepresentativeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_representative, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static FragmentRepresentativeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<FragmentRepresentativeBinding>inflateInternal(inflater, R.layout.fragment_representative, root, attachToRoot, component);
  }

  @NonNull
  public static FragmentRepresentativeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_representative, null, false, component)
   */
  @NonNull
  @Deprecated
  public static FragmentRepresentativeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<FragmentRepresentativeBinding>inflateInternal(inflater, R.layout.fragment_representative, null, false, component);
  }

  public static FragmentRepresentativeBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static FragmentRepresentativeBinding bind(@NonNull View view, @Nullable Object component) {
    return (FragmentRepresentativeBinding)bind(component, view, R.layout.fragment_representative);
  }
}
